@inject QuizService QuizService
@using QuizWiz.Application.SharedModel
@rendermode InteractiveServer

<div class="container mt-5">
    <h2 class="text-center">Quiz</h2>
    <div "score-display position-fixed top-0 end-0 bg-light p-2 rounded shadow-sm" style="font-size: 17px; right: 10px; top: 10px;">
        Score: @QuizService.Score / @QuizService.TotalQuestions
    </div>

    @if (currentQuestion != null)
    {
        <QuizQuestion Question="@currentQuestion" OnOptionSelected="@HandleOptionSelected"></QuizQuestion>
    }
    else if (QuizService.QuestionsAnswered >= QuizService.TotalQuestions)
    {
        <QuizFinishPage />
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    private Quiz currentQuestion;
    [Parameter] public List<Quiz> Questions { get; set; }

    protected override void OnInitialized()
    {
        if (Questions != null && Questions.Any())
        {
            QuizService.InitializeQuiz(Questions);
            LoadNextQuestion();
        }
    }

    private void LoadNextQuestion()
    {
        if (QuizService.QuestionsAnswered < Questions.Count)
        {
            currentQuestion = Questions[QuizService.QuestionsAnswered];
        }
        else
        {
            currentQuestion = null;
        }
    }

    private async Task HandleOptionSelected(string selectedOption)
    {
        bool isCorrect = selectedOption == currentQuestion.CorrectAnswer;
        QuizService.AnswerQuestion(isCorrect);

        StateHasChanged();

        await Task.Delay(2000);

        LoadNextQuestion();

        // Update UI for next question
        StateHasChanged();
    }
}
