@page "/student/dashboard"
@using QuizWiz.Application.SharedModel
@using QuizWiz.Web.Services
@inject NavigationManager NavigationManager
@inject QuizStateService QuizStateService
@inject IStudentService StudentService
@inject ITokenService TokenService
@inject LoadingService LoadingService
@rendermode InteractiveServer

<h3>Student Dashboard</h3>

<textarea @bind="teacherEmail" placeholder="Enter teacher email here..."></textarea>
<button type="button" @onclick="GetQuizByEmailAsync">Get Quiz</button>

<button type="button" @onclick="LogoutAsync">Logout</button>

<LoadingSpinner /> 

@if (!LoadingService.IsLoading && quizzesResponse != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Topic</th>
                <th>Email</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quiz in quizzesResponse)
            {
                <tr>
                    <td>@quiz.Topic</td>
                    <td>@quiz.Email</td>
                    <td><button @onclick="() => StartQuiz(quiz.Id.ToString(), quiz.Email)">Start Quiz</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CosmosEmailQueryResponse> quizzesResponse;
    private List<Quiz> quizzes;
    private string teacherEmail;

    private async Task GetQuizByEmailAsync()
    {
        LoadingService.Show();
        try
        {
            var token = await TokenService.GetTokenAsync();
            var response = await StudentService.GetQuizByEmailAsync(token, teacherEmail);
            quizzesResponse = response.ToList();
        }
        finally
        {
            LoadingService.Hide();
        }

    }

    private async Task StartQuiz(string itemId, string email)
    {
        LoadingService.Show();
        try
        {
            var token = await TokenService.GetTokenAsync();
            var quizResult = await StudentService.GetQuizAsync(token, itemId, email);
            QuizStateService.SetQuestions(quizResult.Quiz);
            NavigationManager.NavigateTo("/student/quiz");
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private async Task LogoutAsync()
    {
        await TokenService.ClearTokenAsync();
        NavigationManager.NavigateTo("/");
    }
}
