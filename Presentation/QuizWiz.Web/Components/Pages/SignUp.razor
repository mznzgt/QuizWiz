@page "/signup"
@using Microsoft.AspNetCore.Identity
@using QuizWiz.Web.Model
@using QuizWiz.Web.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.Toast.Services.IToastService ToastService
@rendermode InteractiveServer

<PageTitle>SignUp</PageTitle>

<ErrorBoundary>
<EditForm Model="signupModel" OnValidSubmit="HandleSignup" FormName="RegisterForm" class="container mt-4">
    <div class="text-center mb-4">
        <h3 class="font-weight-bold">Sign Up</h3>
    </div>

    <div class="form-group mb-3">
        <label for="email">Email address</label>
        <InputText class="form-control" id="email" @bind-Value="signupModel.Email" placeholder="Email address" />
    </div>

    <div class="form-group mb-3">
        <label for="password">Password</label>
        <InputText type="password" class="form-control" id="password" @bind-Value="signupModel.Password" placeholder="Password" />
    </div>

    <div class="form-group mb-3">
        <label for="confirm-password">Confirm Password</label>
        <InputText type="password" class="form-control" id="confirm-password" @bind-Value="signupModel.ConfirmPassword" placeholder="Confirm password" />
    </div>

    <div class="form-group mb-3">
        <label for="role">Role</label>
        <InputSelect id="role" class="form-control" @bind-Value="signupModel.Role">
            <option value="">Select a role</option>
            <option value="Student">Student</option>
            <option value="Teacher">Teacher</option>
        </InputSelect>
    </div>

    <div class="form-group mb-4">
        <input type="submit" class="btn btn-primary btn-block" value="Sign Up" />
    </div>

    <div class="text-center">
        <a href="/login">Already a user? Log in</a>
    </div>

    <div class="mb-3">
        @if (registerResult.Successful)
        {
            <div class="alert alert-success" role="alert">
                <strong>Success!</strong> You have successfully registered.
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <strong>Error!</strong> @errorMessage
            </div>
        }
    </div>

  </EditForm>
  </ErrorBoundary>

@code {
    [SupplyParameterFromForm]
    private SignupModel signupModel { get; set; }
    private RegisterResult registerResult { get; set; } = new();
    private string errorMessage { get; set; }

    protected override void OnInitialized() => signupModel ??= new();

    private async Task HandleSignup()
    {
        if (signupModel.Password.Equals(signupModel.ConfirmPassword))
        {
            var register = new Register()
                {
                    Email = signupModel.Email,
                    Password = signupModel.Password,
                    Role = signupModel.Role
                };

            var registerResult = await AuthService.RegisterAsync(register);

            // if (!registerResult.Successful)
            // {
            //     registerResult.Response.Errors
            //     .SelectMany(e => e.Value)
            //     .ToList()
            //     .ForEach(e => errorMessage += e + Environment.NewLine);
            // }
            //else
            //{
                ToastService.ShowSuccess("You have successfully registered!");
                await Task.Delay(3000);
                NavigationManager.NavigateTo("/login");
            //}
        }
    }

    public class SignupModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
        public string Role { get; set; }
    }
}
