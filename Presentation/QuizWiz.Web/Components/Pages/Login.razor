@page "/login"
@using Microsoft.AspNetCore.Identity
@using QuizWiz.Domain.Constants
@using QuizWiz.Domain.Models
@using QuizWiz.Web.Model
@using QuizWiz.Web.Services
@inject ITokenService TokenService
@inject IAuthService AuthService
@inject IJwtService JwtService
@inject LoadingService LoadingService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<LoadingSpinner />

@if (!LoadingService.IsLoading)
{
    <EditForm Model="@loginModel" OnValidSubmit="@HandleLoginAsync">
        <div class="text-center mb-4">
            <h3 style="font-weight:bold">Login</h3>
        </div>

        <div class="form-group mb-3">
            <InputText class="form-control col-12" @bind-Value="loginModel.Email" placeholder="email address" />
        </div>

        <div class="form-group mb-3">
            <InputText type="password" class="form-control col-12" @bind-Value="loginModel.Password" placeholder="password" />
        </div>

        <div class="form-group mb-3">
            <input type="submit" class="form-control col-6 btn btn-primary" value="Log in" />
            <a href="/signup" class="col-6">Need an account?</a>
        </div>

        <div class="mb-3">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <strong>Error!</strong> @errorMessage
                </div>
            }
        </div>
    </EditForm>
}

@code {
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; }
    private string errorMessage { get; set; }

    protected override void OnInitialized()
    {
        loginModel ??= new();
    }

    private async Task HandleLoginAsync()
    {
        LoadingService.Show();

        var loginRequest = new UserLoginModel
            {
                Email = loginModel.Email,
                Password = loginModel.Password
            };

        var loginResponse = await AuthService.LoginAsync(loginRequest);

        if (!string.IsNullOrEmpty(loginResponse.Token))
        {
            var token = loginResponse.Token;
            await TokenService.StoreTokenAsync(token);

            var userRole = JwtService.GetRoleFromToken(token);

            if (userRole == UserRole.Student.ToString())
            {
                NavigationManager.NavigateTo("/student/dashboard");
            }
            else if (userRole == UserRole.Teacher.ToString())
            {
                NavigationManager.NavigateTo("/teacher/dashboard");
            }
            else
            {
                errorMessage = "Invalid user role";
            }

            LoadingService.Hide();
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}